{"version":3,"sources":["serviceWorker.js","taxonomies/odinTaxonomy.js","taxonomies/antediluvianTaxonomy.js","taxonomies/index.js","taxonomies/fauna/index.js","schema/index.js","components/Input/SelectInput.js","components/Preferences/PreferencesForm.js","components/Preferences/PreferencesPanel.js","components/Common/CommonDetailsPanel.js","components/SystemDetails/SystemDetailsForm.js","helpers/portmanteauHelper.js","helpers/systemDetailsHelper.js","components/SystemDetails/SystemDetailsPanel.js","components/PlanetDetails/PlanetDetailsForm.js","helpers/planetDetailsHelper.js","components/PlanetDetails/PlanetDetailsPanel.js","components/FaunaDetails/FaunaDetailsForm.js","helpers/faunaDetailsHelper.js","components/FaunaDetails/FaunaDetailsPanel.js","components/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","concat","fetch","then","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","odinTaxonomy","spectralClassMap","O","0","1","2","3","4","5","6","7","8","9","B","A","F","G","K","M","L","T","Y","E","odditiesMap","e","f","h","k","m","n","p","q","s","v","w","weatherOptionList","sentinelMap","faunaMap","floraMap","behaviourOptionList","antediluvianTaxonomy","AVAILABLE_TAXONOMIES","_AVAILABLE_TAXONOMIES","Object","defineProperty","AVAILABLE_GENUS_LIST","AVAILABLE_GENUS_DESCRIPTION_LIST","_AVAILABLE_GENUS_DESC","defaults","preferences","__typename","taxonomyId","systemDetails","regionName","spectralClass","distanceFromCenter","planetDetails","weather","sentinels","fauna","flora","isMoon","faunaDetails","genus","behaviour","floraDetails","waypointDetails","structure","resolvers","renderFormControl","options","value","onChange","react_default","a","createElement","FormControl","componentClass","map","option","key","SelectInput","_ref","controlId","label","tooltip","FormGroup","Col","ControlLabel","xs","InputGroup","Button","OverlayTrigger","rootClose","trigger","placement","overlay","aria-label","Glyphicon","glyph","renderFormControlWithOverlay","handleFieldChange","curry","update","field","target","PreferencesForm","Form","Input_SelectInput","keys","PREFERENCES_QUERY","gql","_templateObject","updatePreferences","client","writeData","data","objectSpread","PreferencesPanel","react_apollo_browser_umd","query","_ref2","_ref2$data","loading","Panel","bsStyle","Heading","Body","Preferences_PreferencesForm","renderPanel","CommonDetailsPanel","renderForm","validateData","generateName","useApolloClient","_useQuery","useQuery","suspend","taxonomy","Error","getTaxonomy","isValid","Footer","SystemDetailsForm","horizontal","type","placeholder","Addon","isFirstWord","wordIndex","isLastWord","words","length","filterCloseToStart","indexList","filter","index","filterCloseToEnd","word","appendIfVowel","vowelList","character","toConsumableArray","isVowel","findPossibleBreakpointLists","flow","split","characterList","reduce","findValidBreakpointLists","wordList","identity","generateWordPartListForMiddleWord","combinations","combinationList","combination","filteredCombinationList","combinationStart","generateWordPartLists","breakpointLists","breakpointList","breakpointListIndex","breakpoint","Infinity","generateCombinationList","lists","combinationListNested","generateCombinationListNested","toArray","list","otherLists","slice","arguments","undefined","flattenDepth","appendToPortmanteau","portmanteau","_ref3","_ref4","slicedToArray","wordPartStartIndex","wordPartEndIndex","wordPart","substring","appendTrimmedWord","generatePortmanteau","seed","randomGenerator","random","create","portmanteauList","wordListPrepared","toLower","wordPartLists","wordPartCombinationList","wordPartCombination","uniq","generatePortmanteauList","range","SPECTRAL_CLASS_REGEXP","parseSpectralClass","test","_SPECTRAL_CLASS_REGEX","exec","_SPECTRAL_CLASS_REGEX2","starClass","starTemperature","oddities","validateSystemDetails","_data$systemDetails","validRegionName","validateRegionName","validSpectralClass","validateSpectralClass","_parseSpectralClass","isClassValid","areOdditiesValid","oddity","generateSystemNameShort","_data$systemDetails2","_parseSpectralClass2","className","nameShort","upperFirst","generateSystemName","systemNameShort","oddityAffixList","join","SYSTEM_DETAILS_QUERY","SystemDetailsPanel_templateObject","updateSystemDetails","SystemDetails_SystemDetailsForm","assign","SystemDetailsPanel","Common_CommonDetailsPanel","handleCheckboxChange","checked","PlanetDetailsForm","levels","id","validatePlanetDetails","_data$planetDetails","validWeather","validateWeather","isSentinelsMapped","isFaunaMapped","isFloraMapped","generatePlanetNameShort","weatherOptionIndex","systemName","weatherName","generatePlanetName","_data$planetDetails2","planetNameShort","planetNameOther","moonName","planetAndMoonName","PLANET_DETAILS_QUERY","PlanetDetailsPanel_templateObject","updatePlanetDetails","PlanetDetails_PlanetDetailsForm","PlanetDetailsPanel","genusPopover","Popover","title","description","link","rel","FaunaDetailsForm","validateFaunaDetails","_data$faunaDetails","validGenus","validateGenus","validBehaviour","validateBehaviour","generateFaunaName","_data$faunaDetails2","planetName","behaviourOptionIndex","behaviourName","FAUNA_DETAILS_QUERY","FaunaDetailsPanel_templateObject","updateFaunaDetails","FaunaDetails_FaunaDetailsForm","FaunaDetailsPanel","App","Jumbotron","Grid","md","Row","Preferences_PreferencesPanel","lg","SystemDetails_SystemDetailsPanel","PlanetDetails_PlanetDetailsPanel","FaunaDetails_FaunaDetailsPanel","cache","InMemoryCache","storage","localStorage","persistCache","ApolloClient","withClientState","typeDefs","render","es","components_App","document","getElementById","registerServiceWorker"],"mappings":"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EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,MAuFHC,kBAlFwB,CACxB,YACA,YACA,aACA,WACA,UACA,QACA,YACA,WA2EAC,YAxEkB,CAClBhC,EAAG,WACHC,EAAG,QACHC,EAAG,UACHC,EAAG,YACHC,EAAG,OACHC,EAAG,eAmEH4B,SAhEe,CACfjC,EAAG,cACHC,EAAG,WACHC,EAAG,YACHC,EAAG,MACHC,EAAG,MACHC,EAAG,SA2DH6B,SAxDe,CACflC,EAAG,QACHC,EAAG,YACHC,EAAG,QACHC,EAAG,SACHC,EAAG,UACHC,EAAG,SAmDH8B,oBA9C0B,CAC1B,MACA,SACA,OACA,OACA,QACA,QACA,MACA,MACA,QACA,SACA,MACA,QACA,OACA,OACA,QACA,OACA,OACA,OACA,MACA,MACA,MACA,MACA,SACA,MACA,QACA,OACA,KACA,SACA,MACA,WACA,OACA,MACA,QACA,UCcaC,EAAA,CACbvC,iBA/OuB,CACvBC,EAAG,CACDC,EAAG,UACHC,EAAG,UACHC,EAAG,SACHC,EAAG,SACHC,EAAG,OACHC,EAAG,OACHC,EAAG,SACHC,EAAG,SACHC,EAAG,UACHC,EAAG,WAELC,EAAG,CACDV,EAAG,oBACHC,EAAG,oBACHC,EAAG,UACHC,EAAG,UACHC,EAAG,aACHC,EAAG,aACHC,EAAG,SACHC,EAAG,SACHC,EAAG,aACHC,EAAG,cAELE,EAAG,CACDX,EAAG,UACHC,EAAG,QACHC,EAAG,YACHC,EAAG,eACHC,EAAG,cACHC,EAAG,UACHC,EAAG,eACHC,EAAG,SACHC,EAAG,SACHC,EAAG,UAELG,EAAG,CACDZ,EAAG,WACHC,EAAG,WACHC,EAAG,SACHC,EAAG,SACHC,EAAG,eACHC,EAAG,eACHC,EAAG,aACHC,EAAG,aACHC,EAAG,SACHC,EAAG,UAELI,EAAG,CACDb,EAAG,WACHC,EAAG,cACHC,EAAG,WACHC,EAAG,WACHC,EAAG,SACHC,EAAG,SACHC,EAAG,QACHC,EAAG,UACHC,EAAG,YACHC,EA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","file":"static/js/main.43a70ad1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// SYSTEM NAME PARTS\r\n\r\nconst spectralClassMap = {\r\n  O: {\r\n    0: \"horus\",\r\n    1: \"horus\",\r\n    2: \"vishnu\",\r\n    3: \"vishnu\",\r\n    4: \"hera\",\r\n    5: \"hera\",\r\n    6: \"lir\",\r\n    7: \"lir\",\r\n    8: \"njord\",\r\n    9: \"njord\"\r\n  },\r\n  B: {\r\n    0: \"hathor\",\r\n    1: \"hathor\",\r\n    2: \"shiva\",\r\n    3: \"shiva\",\r\n    4: \"athena\",\r\n    5: \"athena\",\r\n    6: \"boann\",\r\n    7: \"boann\",\r\n    8: \"frigg\",\r\n    9: \"frigg\"\r\n  },\r\n  A: {\r\n    0: \"ptah\",\r\n    1: \"ptah\",\r\n    2: \"saraswati\",\r\n    3: \"saraswati\",\r\n    4: \"apollo\",\r\n    5: \"apollo\",\r\n    6: \"epona\",\r\n    7: \"epona\",\r\n    8: \"heimdall\",\r\n    9: \"heimdall\"\r\n  },\r\n  F: {\r\n    0: \"Khons\",\r\n    1: \"Khons\",\r\n    2: \"Krishna\",\r\n    3: \"Krishna\",\r\n    4: \"Hermes\",\r\n    5: \"Hermes\",\r\n    6: \"Cernunnos\",\r\n    7: \"Cernunnos\",\r\n    8: \"Baldur\",\r\n    9: \"Baldur\"\r\n  },\r\n  G: {\r\n    0: \"Ra\",\r\n    1: \"Ra\",\r\n    2: \"Ganesha\",\r\n    3: \"Ganesha\",\r\n    4: \"Aphrodite\",\r\n    5: \"Aphrodite\",\r\n    6: \"Lugh\",\r\n    7: \"Lugh\",\r\n    8: \"Mimir\",\r\n    9: \"Mimir\"\r\n  },\r\n  K: {\r\n    0: \"Bast\",\r\n    1: \"Bast\",\r\n    2: \"Agni\",\r\n    3: \"Agni\",\r\n    4: \"Hephaestus\",\r\n    5: \"Hephaestus\",\r\n    6: \"Teutates\",\r\n    7: \"Teutates\",\r\n    8: \"Tyr\",\r\n    9: \"Tyr\"\r\n  },\r\n  M: {\r\n    0: \"Sekhmet\",\r\n    1: \"Sekhmet\",\r\n    2: \"Durga\",\r\n    3: \"Durga\",\r\n    4: \"Hestia\",\r\n    5: \"Hestia\",\r\n    6: \"Aodh\",\r\n    7: \"Aodh\",\r\n    8: \"Thor\",\r\n    9: \"Thor\"\r\n  },\r\n  L: {\r\n    0: \"Thoth\",\r\n    1: \"Thoth\",\r\n    2: \"Nakul\",\r\n    3: \"Nakul\",\r\n    4: \"Ares\",\r\n    5: \"Ares\",\r\n    6: \"Morrigan\",\r\n    7: \"Morrigan\",\r\n    8: \"Sigyn\",\r\n    9: \"Sigyn\"\r\n  },\r\n  T: {\r\n    0: \"Amon\",\r\n    1: \"Amon\",\r\n    2: \"Parvati\",\r\n    3: \"Parvati\",\r\n    4: \"Poseidon\",\r\n    5: \"Poseidon\",\r\n    6: \"Druantia\",\r\n    7: \"Druantia\",\r\n    8: \"Nerthus\",\r\n    9: \"Nerthus\"\r\n  },\r\n  Y: {\r\n    0: \"Seth\",\r\n    1: \"Seth\",\r\n    2: \"Kali\",\r\n    3: \"Kali\",\r\n    4: \"Zeus\",\r\n    5: \"Zeus\",\r\n    6: \"Anu\",\r\n    7: \"Anu\",\r\n    8: \"Audhumla\",\r\n    9: \"Audhumla\"\r\n  },\r\n  E: {\r\n    0: \"Isis\",\r\n    1: \"Isis\",\r\n    2: \"Matangi\",\r\n    3: \"Matangi\",\r\n    4: \"Demeter\",\r\n    5: \"Demeter\",\r\n    6: \"Ce aehd\",\r\n    7: \"Ce aehd\",\r\n    8: \"Sif\",\r\n    9: \"Sif\"\r\n  }\r\n};\r\n\r\nconst odditiesMap = {\r\n  e: \"ei\",\r\n  f: \"ef\",\r\n  h: \"ah\",\r\n  k: \"ak\",\r\n  m: \"im\",\r\n  n: \"in\",\r\n  p: \"op\",\r\n  q: \"oq\",\r\n  s: \"us\",\r\n  v: \"yv\",\r\n  w: \"uw\"\r\n};\r\n\r\n// PLANET NAME PARTS\r\n\r\nconst weatherOptionList = [\r\n  \"himnariki\",\r\n  \"proskadur\",\r\n  \"yfirgefinn\",\r\n  \"framandi\",\r\n  \"brenndu\",\r\n  \"fryst\",\r\n  \"eiturefni\",\r\n  \"geislad\"\r\n];\r\n\r\nconst sentinelMap = {\r\n  1: \"hlutlaus\",\r\n  2: \"slaka\",\r\n  3: \"stadall\",\r\n  4: \"ahugavert\",\r\n  5: \"aedi\",\r\n  6: \"arasargjarn\"\r\n};\r\n\r\nconst faunaMap = {\r\n  1: \"fjarverandi\",\r\n  2: \"oalgengt\",\r\n  3: \"venjulegt\",\r\n  4: \"tid\",\r\n  5: \"nog\",\r\n  6: \"fullt\"\r\n};\r\n\r\nconst floraMap = {\r\n  1: \"engin\",\r\n  2: \"venjulegt\",\r\n  3: \"milli\",\r\n  4: \"naegur\",\r\n  5: \"orlatur\",\r\n  6: \"rikur\"\r\n};\r\n\r\n// FAUNA NAME PARTS\r\n\r\nconst behaviourOptionList = [\r\n  \"ull\",\r\n  \"freyja\",\r\n  \"mani\",\r\n  \"saga\",\r\n  \"mimir\",\r\n  \"meili\",\r\n  \"bil\",\r\n  \"sol\",\r\n  \"fulla\",\r\n  \"hretha\",\r\n  \"eir\",\r\n  \"magni\",\r\n  \"irpa\",\r\n  \"lofn\",\r\n  \"narvi\",\r\n  \"idun\",\r\n  \"zisa\",\r\n  \"odin\",\r\n  \"rig\",\r\n  \"day\",\r\n  \"vor\",\r\n  \"var\",\r\n  \"saxnot\",\r\n  \"hod\",\r\n  \"freyr\",\r\n  \"thor\",\r\n  \"od\",\r\n  \"balder\",\r\n  \"syn\",\r\n  \"dellingr\",\r\n  \"loki\",\r\n  \"hel\",\r\n  \"rindr\",\r\n  \"aegir\"\r\n];\r\n\r\nexport const TAXONOMY_ID = \"Odin\";\r\n\r\nexport default {\r\n  spectralClassMap,\r\n  odditiesMap,\r\n  weatherOptionList,\r\n  sentinelMap,\r\n  faunaMap,\r\n  floraMap,\r\n  behaviourOptionList\r\n};\r\n","// SYSTEM NAME PARTS\r\n\r\n// Using Great Old Ones (mostly alphabetically)\r\nconst spectralClassMap = {\r\n  O: {\r\n    0: \"Quyagen\",\r\n    1: \"Quyagen\",\r\n    2: \"Ob'mbu\",\r\n    3: \"Ob'mbu\",\r\n    4: \"Oorn\",\r\n    5: \"Oorn\",\r\n    6: \"Othuum\",\r\n    7: \"Othuum\",\r\n    8: \"Othuyeg\",\r\n    9: \"Othuyeg\"\r\n  },\r\n  B: {\r\n    0: \"Baoht Z'uqqa Mogg\",\r\n    1: \"Baoht Z'uqqa Mogg\",\r\n    2: \"Basatan\",\r\n    3: \"Basatan\",\r\n    4: \"B'gnu Thun\",\r\n    5: \"B'gnu Thun\",\r\n    6: \"Bokrug\",\r\n    7: \"Bokrug\",\r\n    8: \"Bugg Shash\",\r\n    9: \"Bugg Shash\"\r\n  },\r\n  A: {\r\n    0: \"Abholos\",\r\n    1: \"Alala\",\r\n    2: \"Ammutseba\",\r\n    3: \"Amon Gorloth\",\r\n    4: \"Aphoom Zhah\",\r\n    5: \"Arwassa\",\r\n    6: \"Atlach Nacha\",\r\n    7: \"Ayi'ig\",\r\n    8: \"Aylith\",\r\n    9: \"Axtlan\"\r\n  },\r\n  F: {\r\n    0: \"Hastalyk\",\r\n    1: \"Hastalyk\",\r\n    2: \"Hastur\",\r\n    3: \"Hastur\",\r\n    4: \"H'chtelegoth\",\r\n    5: \"H'chtelegoth\",\r\n    6: \"Haiogh Yai\",\r\n    7: \"Haiogh Yai\",\r\n    8: \"Hnarqu\",\r\n    9: \"Hnarqu\"\r\n  },\r\n  G: {\r\n    0: \"Ghadamon\",\r\n    1: \"Ghatanothoa\",\r\n    2: \"Ghisguth\",\r\n    3: \"Gi Hoveg\",\r\n    4: \"Glaaki\",\r\n    5: \"Gleeth\",\r\n    6: \"Gloon\",\r\n    7: \"Gobogeg\",\r\n    8: \"Golothess\",\r\n    9: \"Gtuhanai\"\r\n  },\r\n  K: {\r\n    0: \"Kaalut\",\r\n    1: \"Kag'Naru\",\r\n    2: \"Kassogtha\",\r\n    3: \"Kaunuzoth\",\r\n    4: \"Khal'kru\",\r\n    5: \"Klosmiebhyx\",\r\n    6: \"K'nar'st\",\r\n    7: \"Krang\",\r\n    8: \"Kthaw'keth\",\r\n    9: \"Kurpannga\"\r\n  },\r\n  M: {\r\n    0: \"Mappo\",\r\n    1: \"Mappo\",\r\n    2: \"M'basui\",\r\n    3: \"M'basui\",\r\n    4: \"M'Nagalah\",\r\n    5: \"M'Nagalah\",\r\n    6: \"Mnomquah\",\r\n    7: \"Mnomquah\",\r\n    8: \"Mordiggian\",\r\n    9: \"Mordiggian\"\r\n  },\r\n  L: {\r\n    0: \"Lexur'iga\",\r\n    1: \"Lexur'iga\",\r\n    2: \"Lythalia\",\r\n    3: \"Lythalia\",\r\n    4: \"Xalafu\",\r\n    5: \"Xalafu\",\r\n    6: \"Xcthol\",\r\n    7: \"Xcthol\",\r\n    8: \"Xinlurgash\",\r\n    9: \"Xinlurgash\"\r\n  },\r\n  T: {\r\n    0: \"Thanaroa\",\r\n    1: \"Tharapithia\",\r\n    2: \"Thasaidon\",\r\n    3: \"Th'rygh\",\r\n    4: \"Tsathoggua\",\r\n    5: \"Tulushuggua\",\r\n    6: \"Tulush\",\r\n    7: \"Turua\",\r\n    8: \"Uitzilcapac\",\r\n    9: \"Ut'Ulls Hr'Her\"\r\n  },\r\n  Y: {\r\n    0: \"Yegg Ha\",\r\n    1: \"Y'golonac\",\r\n    2: \"Yhagni\",\r\n    3: \"Yhashtur\",\r\n    4: \"Y'lla\",\r\n    5: \"Yog Sapha\",\r\n    6: \"Yorith\",\r\n    7: \"Ysbaddaden\",\r\n    8: \"Ythogtha\",\r\n    9: \"Yug Siturath\"\r\n  },\r\n  E: {\r\n    0: \"Eihort\",\r\n    1: \"Eihort\",\r\n    2: \"Ei'lor\",\r\n    3: \"Ei'lor\",\r\n    4: \"Etepsed\",\r\n    5: \"Etepsed\",\r\n    6: \"Egnis\",\r\n    7: \"Egnis\",\r\n    8: \"Dhumin\",\r\n    9: \"Dhumin\"\r\n  }\r\n};\r\n\r\n// Same as in Odin's convention\r\nconst odditiesMap = {\r\n  e: \"ei\",\r\n  f: \"ef\",\r\n  h: \"ah\",\r\n  k: \"ak\",\r\n  m: \"im\",\r\n  n: \"in\",\r\n  p: \"op\",\r\n  q: \"oq\",\r\n  s: \"us\",\r\n  v: \"yv\",\r\n  w: \"uw\"\r\n};\r\n\r\n// PLANET NAME PARTS\r\n\r\n// Using location names\r\nconst weatherOptionList = [\r\n  \"R'lyeh\",\r\n  \"Celephais\",\r\n  \"Dylath Leen\",\r\n  \"Serannian\",\r\n  \"Oriab\",\r\n  \"Ulthar\",\r\n  \"Miskatonic\",\r\n  \"Arkham\",\r\n  \"Innsmouth\",\r\n  \"Yuggoth\"\r\n];\r\n\r\n// Using R'Lyehian translations\r\nconst sentinelMap = {\r\n  1: \"ehye\", // None\r\n  2: \"fhtagn\", // Sleeping\r\n  3: \"nafl ehyeeog\", // Not many\r\n  4: \"nafl or'azath\", // Not unusual\r\n  5: \"mgehye'bthnk\", // Attack\r\n  6: \"mg'lloig\" // Insane\r\n};\r\n\r\n// Using Welsh translations\r\nconst faunaMap = {\r\n  1: \"di osgoi\", // Devoid\r\n  2: \"yn fras\", // Sparse\r\n  3: \"cymedrol\", // Moderate\r\n  4: \"uchel\", // High\r\n  5: \"cyfoethog\", // Rich\r\n  6: \"llawn\" // Full\r\n};\r\n\r\n// Using Welsh translations\r\nconst floraMap = {\r\n  1: \"di osgoi\", // Devoid\r\n  2: \"yn fras\", // Sparse\r\n  3: \"cymedrol\", // Moderate\r\n  4: \"uchel\", // High\r\n  5: \"cyfoethog\", // Rich\r\n  6: \"llawn\" // Full\r\n};\r\n\r\n// FAUNA NAME PARTS\r\n\r\n// Using Outer Gods\r\nconst behaviourOptionList = [\r\n  \"Abhoth\",\r\n  \"Aletheia\",\r\n  \"C'thalpa\",\r\n  \"Azhorra Tha\",\r\n  \"Cxaxukluth\",\r\n  \"Daoloth\",\r\n  \"Darkness\",\r\n  \"D’endrrah\",\r\n  \"Ghroth\",\r\n  \"Hydra\",\r\n  \"Ialdagorth\",\r\n  \"Kaajh'Kaalbh\",\r\n  \"Lu Kthu\",\r\n  \"Mh'ithrha\",\r\n  \"Mlandoth\",\r\n  \"Ngyr Korath\",\r\n  \"Nyarlathotep\",\r\n  \"Aiueb Gnshal\",\r\n  \"Nyctelios\",\r\n  \"Ny Rakath\",\r\n  \"Shabbith Ka\",\r\n  \"Shub Niggurath\",\r\n  \"Suc'Naath\",\r\n  \"Tru'nembra\",\r\n  \"Tulzscha\",\r\n  \"Ubbo Sathla\",\r\n  \"Uvhash\",\r\n  \"Xa'ligha\",\r\n  \"Azathoth\",\r\n  \"Xexanoth\",\r\n  \"Yhoundeh\",\r\n  \"Yibb Tstll\",\r\n  \"Yidhra\",\r\n  \"Yog Sothoth\"\r\n];\r\n\r\nexport const TAXONOMY_ID = \"Antediluvian\";\r\n\r\nexport default {\r\n  spectralClassMap,\r\n  odditiesMap,\r\n  weatherOptionList,\r\n  sentinelMap,\r\n  faunaMap,\r\n  floraMap,\r\n  behaviourOptionList\r\n};\r\n","import { get } from \"lodash\";\r\n\r\nimport odinTaxonomy, { TAXONOMY_ID as ODIN_TAXONOMY_ID } from \"./odinTaxonomy\";\r\nimport antediluvianTaxonomy, {\r\n  TAXONOMY_ID as ANTEDILUVIAN_TAXONOMY_ID\r\n} from \"./antediluvianTaxonomy\";\r\n\r\nexport const AVAILABLE_TAXONOMIES = {\r\n  [ODIN_TAXONOMY_ID]: odinTaxonomy,\r\n  [ANTEDILUVIAN_TAXONOMY_ID]: antediluvianTaxonomy\r\n};\r\n\r\nexport const DEFAULT_TAXONOMY_ID = ODIN_TAXONOMY_ID;\r\n\r\nexport const getTaxonomy = taxonomyId => {\r\n  const taxonomy = get(AVAILABLE_TAXONOMIES, taxonomyId);\r\n  if (!taxonomy) {\r\n    throw new Error(`Taxonomy ${taxonomyId} is not defined`);\r\n  }\r\n\r\n  return taxonomy;\r\n};\r\n","// GENUS\r\n\r\n// Terrestrial\r\nexport const GENUS_TETRACERIS = \"Tetraceris\";\r\nexport const GENUS_REOCOCCYX = \"Reococcyx\";\r\nexport const GENUS_RAGNIFAE = \"Rangifae\";\r\nexport const GENUS_THEROMA = \"Theroma\";\r\nexport const GENUS_PROCAVYA = \"Procavya\";\r\nexport const GENUS_CONOKINIS = \"Conokinis\";\r\nexport const GENUS_UNGULATIS = \"Ungulatis\";\r\nexport const GENUS_HEXUNGULATIS = \"Hexungulatis\";\r\nexport const GENUS_FELIDAE = \"Felidae\";\r\nexport const GENUS_FELIHEX = \"Felihex\";\r\nexport const GENUS_ANASTOMUS = \"Anastomus\";\r\nexport const GENUS_TYRANOCAE = \"Tyranocae\";\r\nexport const GENUS_MOGARA = \"Mogara\";\r\nexport const GENUS_LOK = \"Lok\";\r\nexport const GENUS_BOS = \"Bos\";\r\n\r\n// Aquatic\r\nexport const GENUS_ICTALORIS = \"Ictaloris\";\r\nexport const GENUS_PRIONACE = \"Prionace\";\r\nexport const GENUS_PRIONACEFDA = \"Prionacefda\";\r\nexport const GENUS_UNKNOWN = \"Unknown\";\r\n\r\n// Aerial\r\nexport const GENUS_AGNELIS = \"Agnelis\";\r\nexport const GENUS_OXYACTA = \"Oxyacta\";\r\nexport const GENUS_CYCROMYS = \"Cycroms\";\r\nexport const GENUS_RHOPALOCERA = \"Rhopalocera\";\r\n\r\nexport const DEFAULT_GENUS = GENUS_FELIDAE;\r\n\r\nexport const AVAILABLE_GENUS_LIST = [\r\n  GENUS_TETRACERIS,\r\n  GENUS_REOCOCCYX,\r\n  GENUS_RAGNIFAE,\r\n  GENUS_THEROMA,\r\n  GENUS_PROCAVYA,\r\n  GENUS_CONOKINIS,\r\n  GENUS_UNGULATIS,\r\n  GENUS_HEXUNGULATIS,\r\n  GENUS_FELIDAE,\r\n  GENUS_FELIHEX,\r\n  GENUS_ANASTOMUS,\r\n  GENUS_TYRANOCAE,\r\n  GENUS_MOGARA,\r\n  GENUS_LOK,\r\n  GENUS_BOS,\r\n  GENUS_ICTALORIS,\r\n  GENUS_PRIONACE,\r\n  GENUS_PRIONACEFDA,\r\n  GENUS_UNKNOWN,\r\n  GENUS_AGNELIS,\r\n  GENUS_OXYACTA,\r\n  GENUS_CYCROMYS,\r\n  GENUS_RHOPALOCERA\r\n];\r\n\r\nexport const AVAILABLE_GENUS_DESCRIPTION_LIST = {\r\n  [GENUS_TETRACERIS]: \"Antelopes\",\r\n  [GENUS_REOCOCCYX]: \"Bipedal antelopes\",\r\n  [GENUS_RAGNIFAE]: \"Diplos (long necked dinosaurs)\",\r\n  [GENUS_THEROMA]: \"Triceratops (rhinos or hippos)\",\r\n  [GENUS_PROCAVYA]: \"Rodents\",\r\n  [GENUS_CONOKINIS]: \"Beetles (very similar to Bos)\",\r\n  [GENUS_UNGULATIS]: \"Cows\",\r\n  [GENUS_HEXUNGULATIS]: \"Hexapodal cows\",\r\n  [GENUS_FELIDAE]: \"Cats and dogs (both bipedal and quadrupedal)\",\r\n  [GENUS_FELIHEX]: \"Hexapodal cats and dogs\",\r\n  [GENUS_ANASTOMUS]: \"Striders (bipedal, unarmed creatures)\",\r\n  [GENUS_TYRANOCAE]: \"Dinosaurs (like T-Rex)\",\r\n  [GENUS_MOGARA]: \"Grunts (bipedal creatures similar to Gek)\",\r\n  [GENUS_LOK]: \"Blobs\",\r\n  [GENUS_BOS]: \"Spiders (very similar to Conokinis)\",\r\n  [GENUS_ICTALORIS]: \"Fish\",\r\n  [GENUS_PRIONACE]: \"Sharks\",\r\n  [GENUS_PRIONACEFDA]: \"Swimming cows\",\r\n  [GENUS_UNKNOWN]: \"Swimming rodents\",\r\n  [GENUS_AGNELIS]: \"Birds\",\r\n  [GENUS_OXYACTA]: \"Wraiths (flying snakes)\",\r\n  [GENUS_CYCROMYS]: \"Flying lizards\",\r\n  [GENUS_RHOPALOCERA]: \"Butterflies\"\r\n};\r\n","import { DEFAULT_TAXONOMY_ID } from \"../taxonomies\";\r\nimport { DEFAULT_GENUS } from \"../taxonomies/fauna\";\r\n\r\nexport const defaults = {\r\n  preferences: {\r\n    __typename: \"Preferences\",\r\n    taxonomyId: DEFAULT_TAXONOMY_ID\r\n  },\r\n  systemDetails: {\r\n    __typename: \"SystemDetails\",\r\n    regionName: \"\",\r\n    spectralClass: \"\",\r\n    distanceFromCenter: 0\r\n  },\r\n  planetDetails: {\r\n    __typename: \"PlanetDetails\",\r\n    weather: \"\",\r\n    sentinels: 1,\r\n    fauna: 1,\r\n    flora: 1,\r\n    isMoon: false\r\n  },\r\n  faunaDetails: {\r\n    __typename: \"FaunaDetails\",\r\n    genus: DEFAULT_GENUS,\r\n    behaviour: \"\"\r\n  },\r\n  floraDetails: {\r\n    __typename: \"FloraDetails\",\r\n    genus: null\r\n  },\r\n  waypointDetails: {\r\n    __typename: \"WaypointDetails\",\r\n    structure: null\r\n  }\r\n};\r\n\r\nexport const typeDefs = `\r\n  type Preferences {\r\n    taxonomyId: String!\r\n  }\r\n\r\n  type SystemDetails {\r\n    regionName: String!\r\n    spectralClass: String!\r\n    distanceFromCenter: Int!\r\n  }\r\n\r\n  type PlanetDetails {\r\n    weather: String!\r\n    sentinels: Int!\r\n    fauna: Int!\r\n    flora: Int!\r\n    isMoon: Boolean!\r\n  }\r\n\r\n  type FaunaDetails {\r\n    genus: String\r\n    behaviour: String\r\n  }\r\n\r\n  type FloraDetails {\r\n    genus: String\r\n  }\r\n\r\n  type WaypointDetails {\r\n    structure: String\r\n  }\r\n\r\n  type Query {\r\n    preferences: Preferences!\r\n    systemDetails: SystemDetails!\r\n    planetDetails: PlanetDetails!\r\n    faunaDetails: FaunaDetails!\r\n    floraDetails: FloraDetails!\r\n    waypointDetails: WaypointDetails!\r\n  }\r\n`;\r\n\r\nexport const resolvers = {};\r\n","import React from \"react\";\r\n\r\nimport {\r\n  Col,\r\n  FormGroup,\r\n  FormControl,\r\n  ControlLabel,\r\n  OverlayTrigger,\r\n  InputGroup,\r\n  Button,\r\n  Glyphicon\r\n} from \"react-bootstrap\";\r\n\r\nimport { map } from \"lodash\";\r\n\r\nconst renderFormControl = (options, value, onChange) => (\r\n  <FormControl componentClass=\"select\" value={value} onChange={onChange}>\r\n    {map(options, option => (\r\n      <option key={option} value={option}>\r\n        {option}\r\n      </option>\r\n    ))}\r\n  </FormControl>\r\n);\r\n\r\nconst renderFormControlWithOverlay = (options, value, onChange, tooltip) => (\r\n  <InputGroup>\r\n    <InputGroup.Button>\r\n      <OverlayTrigger\r\n        rootClose\r\n        trigger=\"click\"\r\n        placement=\"bottom\"\r\n        overlay={tooltip}\r\n      >\r\n        <Button aria-label=\"Help\">\r\n          <Glyphicon glyph=\"question-sign\" />\r\n        </Button>\r\n      </OverlayTrigger>\r\n    </InputGroup.Button>\r\n    {renderFormControl(options, value, onChange)}\r\n  </InputGroup>\r\n);\r\n\r\nconst SelectInput = ({\r\n  controlId,\r\n  label,\r\n  options,\r\n  value,\r\n  tooltip,\r\n  onChange\r\n}) => (\r\n  <FormGroup controlId={controlId}>\r\n    <Col componentClass={ControlLabel} xs={4}>\r\n      {label}\r\n    </Col>\r\n    <Col xs={8}>\r\n      {tooltip\r\n        ? renderFormControlWithOverlay(options, value, onChange, tooltip)\r\n        : renderFormControl(options, value, onChange)}\r\n    </Col>\r\n  </FormGroup>\r\n);\r\n\r\nexport default SelectInput;\r\n","import React from \"react\";\r\n\r\nimport { Form } from \"react-bootstrap\";\r\nimport SelectInput from \"../Input/SelectInput\";\r\n\r\nimport { curry } from \"lodash\";\r\nimport { AVAILABLE_TAXONOMIES } from \"../../taxonomies\";\r\n\r\nconst handleFieldChange = curry((update, field, e) =>\r\n  update({\r\n    [field]: e.target.value\r\n  })\r\n);\r\n\r\nconst PreferencesForm = ({ update, taxonomyId }) => (\r\n  <Form>\r\n    <SelectInput\r\n      controlId=\"taxonomyId\"\r\n      label=\"Taxonomy\"\r\n      options={Object.keys(AVAILABLE_TAXONOMIES)}\r\n      value={taxonomyId}\r\n      onChange={handleFieldChange(update, \"taxonomyId\")}\r\n    />\r\n  </Form>\r\n);\r\n\r\nexport default PreferencesForm;\r\n","import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { curry } from \"lodash\";\r\n\r\nimport { Query } from \"react-apollo\";\r\nimport { Panel } from \"react-bootstrap\";\r\nimport PreferencesForm from \"./PreferencesForm\";\r\n\r\nconst PREFERENCES_QUERY = gql`\r\n  {\r\n    preferences @client {\r\n      taxonomyId\r\n    }\r\n  }\r\n`;\r\n\r\nconst updatePreferences = curry((client, value) =>\r\n  client.writeData({\r\n    data: {\r\n      preferences: {\r\n        __typename: \"Preferences\",\r\n        ...value\r\n      }\r\n    }\r\n  })\r\n);\r\n\r\nconst renderPanel = (client, { taxonomyId }) => (\r\n  <Panel bsStyle=\"primary\">\r\n    <Panel.Heading>Preferences</Panel.Heading>\r\n    <Panel.Body>\r\n      <PreferencesForm\r\n        taxonomyId={taxonomyId}\r\n        update={updatePreferences(client)}\r\n      />\r\n    </Panel.Body>\r\n  </Panel>\r\n);\r\n\r\nconst PreferencesPanel = () => (\r\n  <Query query={PREFERENCES_QUERY}>\r\n    {({ data: { preferences, systemDetails }, client, loading, error }) => {\r\n      if (loading) {\r\n        return \"Loading...\";\r\n      } else if (error) {\r\n        return \"Error!\";\r\n      }\r\n\r\n      return renderPanel(client, preferences, systemDetails);\r\n    }}\r\n  </Query>\r\n);\r\n\r\nexport default PreferencesPanel;\r\n","import React from \"react\";\r\nimport { useQuery, useApolloClient } from \"react-apollo-hooks\";\r\n\r\nimport { Panel } from \"react-bootstrap\";\r\nimport { getTaxonomy } from \"../../taxonomies\";\r\n\r\nconst CommonDetailsPanel = ({\r\n  query,\r\n  label,\r\n  renderForm,\r\n  validateData,\r\n  generateName\r\n}) => {\r\n  const client = useApolloClient();\r\n  const { data, loading, error } = useQuery(query, { suspend: false });\r\n  if (loading) {\r\n    return \"Loading...\";\r\n  } else if (error) {\r\n    return \"Error!\";\r\n  }\r\n\r\n  const {\r\n    preferences: { taxonomyId }\r\n  } = data;\r\n  const taxonomy = getTaxonomy(taxonomyId);\r\n  const isValid = validateData(taxonomy, data);\r\n  return (\r\n    <Panel bsStyle={isValid ? \"success\" : \"warning\"}>\r\n      <Panel.Heading>{label}</Panel.Heading>\r\n      <Panel.Body>{renderForm(client, data)}</Panel.Body>\r\n      <Panel.Footer>\r\n        {isValid\r\n          ? generateName(taxonomy, data)\r\n          : \"Cannot generate name using supplied information\"}\r\n      </Panel.Footer>\r\n    </Panel>\r\n  );\r\n};\r\n\r\nexport default CommonDetailsPanel;\r\n","import React from \"react\";\r\n\r\nimport {\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  FormControl,\r\n  InputGroup,\r\n  ControlLabel\r\n} from \"react-bootstrap\";\r\n\r\nimport { curry } from \"lodash\";\r\n\r\nconst handleFieldChange = curry((update, field, e) =>\r\n  update({\r\n    [field]: e.target.value\r\n  })\r\n);\r\n\r\nconst SystemDetailsForm = ({\r\n  update,\r\n  regionName,\r\n  spectralClass,\r\n  distanceFromCenter\r\n}) => (\r\n  <Form horizontal>\r\n    <FormGroup controlId=\"regionName\">\r\n      <Col componentClass={ControlLabel} xs={3}>\r\n        Region name\r\n      </Col>\r\n      <Col xs={9}>\r\n        <FormControl\r\n          type=\"text\"\r\n          value={regionName}\r\n          placeholder=\"ex. Toswati Instability\"\r\n          onChange={handleFieldChange(update, \"regionName\")}\r\n        />\r\n      </Col>\r\n    </FormGroup>\r\n    <FormGroup controlId=\"spectralClass\">\r\n      <Col componentClass={ControlLabel} xs={3}>\r\n        Spectral class\r\n      </Col>\r\n      <Col xs={9}>\r\n        <FormControl\r\n          type=\"text\"\r\n          value={spectralClass}\r\n          placeholder=\"ex. F5p\"\r\n          onChange={handleFieldChange(update, \"spectralClass\")}\r\n        />\r\n      </Col>\r\n    </FormGroup>\r\n    <FormGroup controlId=\"distanceFromCenter\">\r\n      <Col componentClass={ControlLabel} xs={3}>\r\n        Distance\r\n      </Col>\r\n      <Col xs={9}>\r\n        <InputGroup>\r\n          <InputGroup.Addon>ly</InputGroup.Addon>\r\n          <FormControl\r\n            type=\"text\"\r\n            value={distanceFromCenter}\r\n            onChange={handleFieldChange(update, \"distanceFromCenter\")}\r\n          />\r\n        </InputGroup>\r\n      </Col>\r\n    </FormGroup>\r\n  </Form>\r\n);\r\n\r\nexport default SystemDetailsForm;\r\n","import {\r\n  curry,\r\n  flow,\r\n  identity,\r\n  get,\r\n  filter,\r\n  map,\r\n  reduce,\r\n  flattenDepth,\r\n  uniq,\r\n  split,\r\n  toLower\r\n} from \"lodash\";\r\nimport isVowel from \"is-vowel\";\r\nimport combinations from \"combinations\";\r\nimport random from \"random-seed\";\r\n\r\nconst isFirstWord = wordIndex => wordIndex === 0;\r\n\r\nconst isMiddleWord = (words, wordIndex) =>\r\n  !isFirstWord(wordIndex) && !isLastWord(words, wordIndex);\r\n\r\nconst isLastWord = (words, wordIndex) => wordIndex === words.length - 1;\r\n\r\nconst toCharacterList = word => split(word, \"\");\r\n\r\nconst filterCloseToStart = indexList => filter(indexList, index => index >= 2);\r\n\r\nconst filterCloseToEnd = curry((word, indexList) =>\r\n  filter(indexList, index => index < word.length - 2)\r\n);\r\n\r\nconst appendIfVowel = (vowelList, character, index) => [\r\n  ...vowelList,\r\n  ...(isVowel(character) ? [index] : [])\r\n];\r\n\r\nconst findVowelList = characterList => reduce(characterList, appendIfVowel, []);\r\n\r\nconst findPossibleBreakpointLists = flow(\r\n  toCharacterList,\r\n  findVowelList\r\n);\r\n\r\nconst findValidBreakpointLists = (word, wordIndex, wordList) =>\r\n  flow(\r\n    findPossibleBreakpointLists,\r\n    isFirstWord(wordIndex) ? filterCloseToStart : identity,\r\n    isLastWord(wordList, wordIndex) ? filterCloseToEnd(word) : identity\r\n  )(word);\r\n\r\nconst generateWordPartListForMiddleWord = flow(\r\n  combinations,\r\n  combinationList =>\r\n    filter(combinationList, combination => combination.length <= 2),\r\n  filteredCombinationList =>\r\n    map(filteredCombinationList, combination => {\r\n      const combinationStart = get(combination, 0, 0);\r\n      return [combinationStart, get(combination, 1, combinationStart)];\r\n    })\r\n);\r\n\r\nconst generateWordPartLists = breakpointLists =>\r\n  map(breakpointLists, (breakpointList, breakpointListIndex) => {\r\n    if (isFirstWord(breakpointListIndex)) {\r\n      return map(breakpointList, breakpoint => [0, breakpoint]);\r\n    } else if (isMiddleWord(breakpointLists, breakpointListIndex)) {\r\n      return generateWordPartListForMiddleWord(breakpointList);\r\n    } else {\r\n      return map(breakpointList, breakpoint => [breakpoint, Infinity]);\r\n    }\r\n  });\r\n\r\nconst generateCombinationListNested = (\r\n  [list, ...otherLists],\r\n  combination = []\r\n) =>\r\n  list\r\n    ? map(list, breakpoint =>\r\n        generateCombinationListNested(otherLists, [...combination, breakpoint])\r\n      )\r\n    : combination;\r\n\r\nconst generateCombinationList = lists => {\r\n  const combinationListNested = generateCombinationListNested(lists);\r\n  return flattenDepth(combinationListNested, lists.length - 1);\r\n};\r\n\r\nconst appendToPortmanteau = curry(\r\n  (\r\n    wordList,\r\n    portmanteau,\r\n    [wordPartStartIndex, wordPartEndIndex],\r\n    wordIndex\r\n  ) => {\r\n    const word = wordList[wordIndex];\r\n    const wordPart = word.substring(wordPartStartIndex, wordPartEndIndex);\r\n\r\n    return `${portmanteau}${wordPart}`;\r\n  }\r\n);\r\n\r\nconst appendTrimmedWord = (wordList, word) => [\r\n  ...wordList,\r\n  ...split(word, /\\s/g)\r\n];\r\n\r\nexport const generatePortmanteauList = wordList => {\r\n  const wordListPrepared = map(\r\n    reduce(wordList, appendTrimmedWord, []),\r\n    toLower\r\n  );\r\n\r\n  const breakpointLists = map(\r\n    map(wordListPrepared, findValidBreakpointLists),\r\n    breakpointList => (breakpointList.length === 0 ? [1] : breakpointList)\r\n  );\r\n\r\n  const wordPartLists = generateWordPartLists(breakpointLists);\r\n  const wordPartCombinationList = generateCombinationList(wordPartLists);\r\n  const portmanteauList = map(wordPartCombinationList, wordPartCombination =>\r\n    reduce(wordPartCombination, appendToPortmanteau(wordListPrepared), \"\")\r\n  );\r\n\r\n  return uniq(portmanteauList);\r\n};\r\n\r\nexport const generatePortmanteau = (wordList, seed = null) => {\r\n  const randomGenerator = seed !== null ? random.create(seed) : random.create();\r\n  const portmanteauList = generatePortmanteauList(wordList);\r\n  const portmanteauIndex = randomGenerator.range(portmanteauList.length);\r\n\r\n  return portmanteauList[portmanteauIndex];\r\n};\r\n","import { get, map, filter, upperFirst, split, join } from \"lodash\";\r\nimport { generatePortmanteau } from \"./portmanteauHelper\";\r\n\r\nconst SPECTRAL_CLASS_REGEXP = /^([OBAFGKMLTYE]{1})([0-9]{1})([efhkmnpqsvw]{0,2})$/;\r\n\r\nconst parseSpectralClass = spectralClass => {\r\n  if (!SPECTRAL_CLASS_REGEXP.test(spectralClass)) {\r\n    throw new Error(`Cannot parse invalid spectral class \"${spectralClass}\"`);\r\n  }\r\n\r\n  const [, starClass, starTemperature, oddities] = SPECTRAL_CLASS_REGEXP.exec(\r\n    spectralClass\r\n  );\r\n\r\n  return {\r\n    starClass,\r\n    starTemperature,\r\n    oddities\r\n  };\r\n};\r\n\r\nexport const validateSystemDetails = (taxonomy, data) => {\r\n  const {\r\n    systemDetails: { regionName, spectralClass }\r\n  } = data;\r\n  const validRegionName = validateRegionName(regionName);\r\n  const validSpectralClass = validateSpectralClass(taxonomy, spectralClass);\r\n\r\n  return validRegionName && validSpectralClass;\r\n};\r\n\r\nexport const validateRegionName = regionName => regionName.length > 2;\r\n\r\nexport const validateSpectralClass = (taxonomy, spectralClass) => {\r\n  const { spectralClassMap, odditiesMap } = taxonomy;\r\n  if (!SPECTRAL_CLASS_REGEXP.test(spectralClass)) {\r\n    return false;\r\n  }\r\n\r\n  const { starClass, starTemperature, oddities } = parseSpectralClass(\r\n    spectralClass\r\n  );\r\n\r\n  const isClassValid =\r\n    get(spectralClassMap, [starClass, starTemperature], null) !== null;\r\n\r\n  const validOddities = filter(\r\n    split(oddities, \"\"),\r\n    oddity => get(odditiesMap, oddity, null) !== null\r\n  );\r\n  const areOdditiesValid = validOddities.length === oddities.length;\r\n\r\n  return isClassValid && areOdditiesValid;\r\n};\r\n\r\nexport const generateSystemNameShort = (taxonomy, data) => {\r\n  if (!validateSystemDetails(taxonomy, data)) {\r\n    throw new Error(\"Cannot generate name with given system data\");\r\n  }\r\n\r\n  const { spectralClassMap } = taxonomy;\r\n  const {\r\n    systemDetails: { regionName, spectralClass, distanceFromCenter }\r\n  } = data;\r\n\r\n  const { starClass, starTemperature } = parseSpectralClass(spectralClass);\r\n  const className = get(spectralClassMap, [starClass, starTemperature]);\r\n  const nameShort = generatePortmanteau(\r\n    [regionName, className],\r\n    distanceFromCenter\r\n  );\r\n\r\n  return upperFirst(nameShort);\r\n};\r\n\r\nexport const generateSystemName = (taxonomy, data) => {\r\n  if (!validateSystemDetails(taxonomy, data)) {\r\n    throw new Error(\"Cannot generate name with given system data\");\r\n  }\r\n\r\n  const { odditiesMap } = taxonomy;\r\n  const {\r\n    systemDetails: { spectralClass }\r\n  } = data;\r\n\r\n  const systemNameShort = generateSystemNameShort(taxonomy, data);\r\n\r\n  const { oddities } = parseSpectralClass(spectralClass);\r\n  const oddityAffixList = map(split(oddities, \"\"), oddity =>\r\n    get(odditiesMap, oddity, \"\")\r\n  );\r\n\r\n  return join(map([systemNameShort, ...oddityAffixList], upperFirst), \"-\");\r\n};\r\n","import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\n\r\nimport CommonDetailsPanel from \"../Common/CommonDetailsPanel\";\r\nimport SystemDetailsForm from \"./SystemDetailsForm\";\r\n\r\nimport { curry } from \"lodash\";\r\nimport {\r\n  validateSystemDetails,\r\n  generateSystemName\r\n} from \"../../helpers/systemDetailsHelper\";\r\n\r\nconst SYSTEM_DETAILS_QUERY = gql`\r\n  {\r\n    preferences @client {\r\n      taxonomyId\r\n    }\r\n    systemDetails @client {\r\n      regionName\r\n      spectralClass\r\n      distanceFromCenter\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateSystemDetails = curry((client, value) =>\r\n  client.writeData({\r\n    data: {\r\n      systemDetails: {\r\n        __typename: \"SystemDetails\",\r\n        ...value\r\n      }\r\n    }\r\n  })\r\n);\r\n\r\nconst renderForm = (client, { systemDetails }) => (\r\n  <SystemDetailsForm {...systemDetails} update={updateSystemDetails(client)} />\r\n);\r\n\r\nconst SystemDetailsPanel = () => (\r\n  <CommonDetailsPanel\r\n    query={SYSTEM_DETAILS_QUERY}\r\n    label=\"System\"\r\n    renderForm={renderForm}\r\n    validateData={validateSystemDetails}\r\n    generateName={generateSystemName}\r\n  />\r\n);\r\n\r\nexport default SystemDetailsPanel;\r\n","import React from \"react\";\r\n\r\nimport {\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  FormControl,\r\n  ControlLabel,\r\n  Checkbox\r\n} from \"react-bootstrap\";\r\nimport SelectInput from \"../Input/SelectInput\";\r\n\r\nimport { curry } from \"lodash\";\r\n\r\nconst handleFieldChange = curry((update, field, e) =>\r\n  update({\r\n    [field]: e.target.value\r\n  })\r\n);\r\n\r\nconst handleCheckboxChange = curry((update, field, e) =>\r\n  update({\r\n    [field]: e.target.checked\r\n  })\r\n);\r\n\r\nconst PlanetDetailsForm = ({\r\n  update,\r\n  weather,\r\n  sentinels,\r\n  fauna,\r\n  flora,\r\n  isMoon\r\n}) => {\r\n  const levels = [1, 2, 3, 4, 5, 6];\r\n  return (\r\n    <Form horizontal>\r\n      <FormGroup controlId=\"weather\">\r\n        <Col componentClass={ControlLabel} xs={4}>\r\n          Weather\r\n        </Col>\r\n        <Col xs={8}>\r\n          <FormControl\r\n            type=\"text\"\r\n            value={weather}\r\n            placeholder=\"ex. Stormy\"\r\n            onChange={handleFieldChange(update, \"weather\")}\r\n          />\r\n        </Col>\r\n      </FormGroup>\r\n      <SelectInput\r\n        controlId=\"sentinels\"\r\n        label=\"Sentinels\"\r\n        options={levels}\r\n        value={sentinels}\r\n        onChange={handleFieldChange(update, \"sentinels\")}\r\n      />\r\n      <SelectInput\r\n        controlId=\"fauna\"\r\n        label=\"Fauna\"\r\n        options={levels}\r\n        value={fauna}\r\n        onChange={handleFieldChange(update, \"fauna\")}\r\n      />\r\n      <SelectInput\r\n        controlId=\"flora\"\r\n        label=\"Flora\"\r\n        options={levels}\r\n        value={flora}\r\n        onChange={handleFieldChange(update, \"flora\")}\r\n      />\r\n      <FormGroup controlId=\"isMoon\">\r\n        <Col componentClass={ControlLabel} xs={4}>\r\n          Moon\r\n        </Col>\r\n        <Col xs={8}>\r\n          <input\r\n            id=\"isMoon\"\r\n            type=\"checkbox\"\r\n            checked={isMoon}\r\n            onChange={handleCheckboxChange(update, \"isMoon\")}\r\n          />\r\n        </Col>\r\n      </FormGroup>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default PlanetDetailsForm;\r\n","import { get, map, upperFirst, join } from \"lodash\";\r\nimport random from \"random-seed\";\r\nimport {\r\n  validateSystemDetails,\r\n  generateSystemNameShort\r\n} from \"./systemDetailsHelper\";\r\nimport { generatePortmanteau } from \"./portmanteauHelper\";\r\n\r\nexport const validatePlanetDetails = (taxonomy, data) => {\r\n  const { sentinelMap, faunaMap, floraMap } = taxonomy;\r\n  const {\r\n    planetDetails: { weather, sentinels, fauna, flora }\r\n  } = data;\r\n\r\n  const validWeather = validateWeather(weather);\r\n  const isSentinelsMapped = get(sentinelMap, sentinels, null) !== null;\r\n  const isFaunaMapped = get(faunaMap, fauna, null) !== null;\r\n  const isFloraMapped = get(floraMap, flora, null) !== null;\r\n\r\n  return (\r\n    validateSystemDetails(taxonomy, data) &&\r\n    validWeather &&\r\n    isSentinelsMapped &&\r\n    isFaunaMapped &&\r\n    isFloraMapped\r\n  );\r\n};\r\n\r\nexport const validateWeather = weather => weather.length > 2;\r\n\r\nexport const generatePlanetNameShort = (taxonomy, data) => {\r\n  if (!validatePlanetDetails(taxonomy, data)) {\r\n    throw new Error(\"Cannot generate name with given system and planet data\");\r\n  }\r\n\r\n  const { weatherOptionList } = taxonomy;\r\n  const {\r\n    systemDetails: { distanceFromCenter },\r\n    planetDetails: { weather }\r\n  } = data;\r\n\r\n  const randomGenerator = random.create(weather);\r\n  const weatherOptionIndex = randomGenerator.range(weatherOptionList.length);\r\n\r\n  const systemName = generateSystemNameShort(taxonomy, data);\r\n  const weatherName = get(weatherOptionList, weatherOptionIndex, weather);\r\n  const nameShort = generatePortmanteau(\r\n    [systemName, weatherName],\r\n    distanceFromCenter\r\n  );\r\n\r\n  return nameShort;\r\n};\r\n\r\nexport const generatePlanetName = (taxonomy, data) => {\r\n  if (!validatePlanetDetails(taxonomy, data)) {\r\n    throw new Error(\"Cannot generate name with given system and planet data\");\r\n  }\r\n\r\n  const { sentinelMap, faunaMap, floraMap } = taxonomy;\r\n  const {\r\n    systemDetails: { distanceFromCenter },\r\n    planetDetails: { sentinels, fauna, flora, isMoon }\r\n  } = data;\r\n\r\n  const planetNameShort = generatePlanetNameShort(taxonomy, data);\r\n\r\n  const planetNameOther = generatePortmanteau(\r\n    [get(sentinelMap, sentinels), get(faunaMap, fauna), get(floraMap, flora)],\r\n    distanceFromCenter\r\n  );\r\n\r\n  const moonName = isMoon ? [\"M\"] : [];\r\n  const planetAndMoonName = join([planetNameOther, ...moonName], \"-\");\r\n\r\n  return join(map([planetNameShort, planetAndMoonName], upperFirst), \" \");\r\n};\r\n","import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\n\r\nimport PlanetDetailsForm from \"./PlanetDetailsForm\";\r\n\r\nimport { curry } from \"lodash\";\r\nimport {\r\n  generatePlanetName,\r\n  validatePlanetDetails\r\n} from \"../../helpers/planetDetailsHelper\";\r\nimport CommonDetailsPanel from \"../Common/CommonDetailsPanel\";\r\n\r\nconst PLANET_DETAILS_QUERY = gql`\r\n  {\r\n    preferences @client {\r\n      taxonomyId\r\n    }\r\n    systemDetails @client {\r\n      regionName\r\n      spectralClass\r\n      distanceFromCenter\r\n    }\r\n    planetDetails @client {\r\n      weather\r\n      sentinels\r\n      fauna\r\n      flora\r\n      isMoon\r\n    }\r\n  }\r\n`;\r\n\r\nconst updatePlanetDetails = curry((client, value) =>\r\n  client.writeData({\r\n    data: {\r\n      planetDetails: {\r\n        __typename: \"SystemDetails\",\r\n        ...value\r\n      }\r\n    }\r\n  })\r\n);\r\n\r\nconst renderForm = (client, { planetDetails }) => (\r\n  <PlanetDetailsForm {...planetDetails} update={updatePlanetDetails(client)} />\r\n);\r\n\r\nconst PlanetDetailsPanel = () => (\r\n  <CommonDetailsPanel\r\n    query={PLANET_DETAILS_QUERY}\r\n    label=\"Planet\"\r\n    renderForm={renderForm}\r\n    validateData={validatePlanetDetails}\r\n    generateName={generatePlanetName}\r\n  />\r\n);\r\n\r\nexport default PlanetDetailsPanel;\r\n","import React from \"react\";\r\n\r\nimport {\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  FormControl,\r\n  ControlLabel,\r\n  Popover\r\n} from \"react-bootstrap\";\r\nimport SelectInput from \"../Input/SelectInput\";\r\n\r\nimport { curry, map, get } from \"lodash\";\r\n\r\nimport {\r\n  AVAILABLE_GENUS_LIST,\r\n  AVAILABLE_GENUS_DESCRIPTION_LIST\r\n} from \"../../taxonomies/fauna\";\r\n\r\nconst genusPopover = (\r\n  <Popover id=\"generaDescription\" title=\"Genera descriptions\">\r\n    <ul>\r\n      {map(AVAILABLE_GENUS_LIST, genus => {\r\n        const description = get(AVAILABLE_GENUS_DESCRIPTION_LIST, genus, null);\r\n        const label = genus + (description ? ` - ${description}` : \"\");\r\n        const link = `https://nomanssky.gamepedia.com/${genus}`;\r\n        return (\r\n          <li key={genus}>\r\n            <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              {label}\r\n            </a>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  </Popover>\r\n);\r\n\r\nconst handleFieldChange = curry((update, field, e) =>\r\n  update({\r\n    [field]: e.target.value\r\n  })\r\n);\r\n\r\nconst FaunaDetailsForm = ({ update, genus, behaviour }) => (\r\n  <Form horizontal>\r\n    <SelectInput\r\n      controlId=\"genus\"\r\n      label=\"Genus\"\r\n      options={AVAILABLE_GENUS_LIST}\r\n      value={genus}\r\n      onChange={handleFieldChange(update, \"genus\")}\r\n      tooltip={genusPopover}\r\n    />\r\n    <FormGroup controlId=\"behaviour\">\r\n      <Col componentClass={ControlLabel} xs={4}>\r\n        Behaviour\r\n      </Col>\r\n      <Col xs={8}>\r\n        <FormControl\r\n          type=\"text\"\r\n          value={behaviour}\r\n          placeholder=\"ex. Indifferent\"\r\n          onChange={handleFieldChange(update, \"behaviour\")}\r\n        />\r\n      </Col>\r\n    </FormGroup>\r\n  </Form>\r\n);\r\n\r\nexport default FaunaDetailsForm;\r\n","import { get, map, upperFirst, join, indexOf } from \"lodash\";\r\nimport random from \"random-seed\";\r\nimport {\r\n  validatePlanetDetails,\r\n  generatePlanetNameShort\r\n} from \"./planetDetailsHelper\";\r\nimport { generatePortmanteau } from \"./portmanteauHelper\";\r\n\r\nimport { AVAILABLE_GENUS_LIST } from \"../taxonomies/fauna\";\r\n\r\nexport const validateFaunaDetails = (taxonomy, data) => {\r\n  const {\r\n    faunaDetails: { genus, behaviour }\r\n  } = data;\r\n  const validGenus = validateGenus(genus);\r\n  const validBehaviour = validateBehaviour(behaviour);\r\n\r\n  return validatePlanetDetails(taxonomy, data) && validGenus && validBehaviour;\r\n};\r\n\r\nexport const validateGenus = genus => indexOf(AVAILABLE_GENUS_LIST, genus) >= 0;\r\n\r\nexport const validateBehaviour = behaviour => behaviour.length > 2;\r\n\r\nexport const generateFaunaName = (taxonomy, data) => {\r\n  if (!validateFaunaDetails(taxonomy, data)) {\r\n    throw new Error(\"Cannot generate name with given fauna data\");\r\n  }\r\n\r\n  const { behaviourOptionList } = taxonomy;\r\n  const {\r\n    systemDetails: { distanceFromCenter },\r\n    faunaDetails: { behaviour, genus }\r\n  } = data;\r\n\r\n  const planetName = generatePlanetNameShort(taxonomy, data);\r\n\r\n  const randomGenerator = random.create(behaviour);\r\n  const behaviourOptionIndex = randomGenerator.range(\r\n    behaviourOptionList.length\r\n  );\r\n\r\n  const behaviourName = generatePortmanteau(\r\n    [genus, get(behaviourOptionList, behaviourOptionIndex)],\r\n    distanceFromCenter\r\n  );\r\n\r\n  return join(map([planetName, behaviourName], upperFirst), \" \");\r\n};\r\n","import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\n\r\nimport FaunaDetailsForm from \"./FaunaDetailsForm\";\r\n\r\nimport { curry } from \"lodash\";\r\nimport {\r\n  validateFaunaDetails,\r\n  generateFaunaName\r\n} from \"../../helpers/faunaDetailsHelper\";\r\nimport CommonDetailsPanel from \"../Common/CommonDetailsPanel\";\r\n\r\nconst FAUNA_DETAILS_QUERY = gql`\r\n  {\r\n    preferences @client {\r\n      taxonomyId\r\n    }\r\n    systemDetails @client {\r\n      regionName\r\n      spectralClass\r\n      distanceFromCenter\r\n    }\r\n    planetDetails @client {\r\n      weather\r\n      sentinels\r\n      fauna\r\n      flora\r\n      isMoon\r\n    }\r\n    faunaDetails @client {\r\n      genus\r\n      behaviour\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateFaunaDetails = curry((client, value) =>\r\n  client.writeData({\r\n    data: {\r\n      faunaDetails: {\r\n        __typename: \"FaunaDetails\",\r\n        ...value\r\n      }\r\n    }\r\n  })\r\n);\r\n\r\nconst renderForm = (client, { faunaDetails }) => (\r\n  <FaunaDetailsForm {...faunaDetails} update={updateFaunaDetails(client)} />\r\n);\r\n\r\nconst FaunaDetailsPanel = () => (\r\n  <CommonDetailsPanel\r\n    query={FAUNA_DETAILS_QUERY}\r\n    label=\"Fauna\"\r\n    renderForm={renderForm}\r\n    validateData={validateFaunaDetails}\r\n    generateName={generateFaunaName}\r\n  />\r\n);\r\n\r\nexport default FaunaDetailsPanel;\r\n","import React from \"react\";\r\n\r\nimport { Jumbotron, Grid, Row, Col } from \"react-bootstrap\";\r\nimport PreferencesPanel from \"./Preferences/PreferencesPanel\";\r\nimport SystemDetailsPanel from \"./SystemDetails/SystemDetailsPanel\";\r\nimport PlanetDetailsPanel from \"./PlanetDetails/PlanetDetailsPanel\";\r\nimport FaunaDetailsPanel from \"./FaunaDetails/FaunaDetailsPanel\";\r\n\r\nconst App = () => (\r\n  <div>\r\n    <Jumbotron>\r\n      <Grid>\r\n        <Col md={12}>\r\n          <h2>No Man's Sky Taxonomy</h2>\r\n        </Col>\r\n        <Col md={12}>\r\n          <h6>\r\n            Created by{\" \"}\r\n            <a\r\n              href=\"https://github.com/Mutisz\"\r\n              rel=\"noopener noreferrer\"\r\n              target=\"_blank\"\r\n            >\r\n              Mutisz\r\n            </a>\r\n            , based on{\" \"}\r\n            <a\r\n              href=\"https://www.odingaming.com/2018/01/15/no-mans-sky-naming-convention/\"\r\n              rel=\"noopener noreferrer\"\r\n              target=\"_blank\"\r\n            >\r\n              Odin's Convention\r\n            </a>\r\n          </h6>\r\n        </Col>\r\n      </Grid>\r\n    </Jumbotron>\r\n    <Grid>\r\n      <Row className=\"show-grid\">\r\n        <Col md={12}>\r\n          <PreferencesPanel />\r\n        </Col>\r\n        <Col md={6} lg={4}>\r\n          <SystemDetailsPanel />\r\n        </Col>\r\n        <Col md={6} lg={4}>\r\n          <PlanetDetailsPanel />\r\n        </Col>\r\n        <Col md={6} lg={4}>\r\n          <FaunaDetailsPanel />\r\n        </Col>\r\n      </Row>\r\n    </Grid>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { register as registerServiceWorker } from \"./serviceWorker\";\r\n\r\nimport ApolloClient from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { persistCache } from \"apollo-cache-persist\";\r\nimport { withClientState } from \"apollo-link-state\";\r\nimport { defaults, typeDefs, resolvers } from \"./schema\";\r\n\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport { ApolloProvider as ApolloProviderHooks } from \"react-apollo-hooks\";\r\nimport App from \"./components/App\";\r\n\r\nconst cache = new InMemoryCache();\r\nconst storage = window.localStorage;\r\n\r\nconst createClient = () =>\r\n  new ApolloClient({\r\n    cache,\r\n    link: withClientState({ defaults, typeDefs, resolvers })\r\n  });\r\n\r\nconst renderApp = () => {\r\n  const client = createClient();\r\n  render(\r\n    <ApolloProvider client={client}>\r\n      <ApolloProviderHooks client={client}>\r\n        <App />\r\n      </ApolloProviderHooks>\r\n    </ApolloProvider>,\r\n    document.getElementById(\"root\")\r\n  );\r\n\r\n  registerServiceWorker();\r\n};\r\n\r\npersistCache({\r\n  cache: cache,\r\n  storage: storage,\r\n  key: \"nms-taxonomy-v1\"\r\n})\r\n  .then(renderApp)\r\n  .catch(error => console.error(error));\r\n"],"sourceRoot":""}